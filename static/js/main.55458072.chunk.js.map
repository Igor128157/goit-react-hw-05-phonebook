{"version":3,"sources":["transitions/fade.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/Contact/Contact.module.css","components/Filter/Filter.module.css","components/Notification/Notification.module.css","transitions/slide.module.css","transitions/notification-transition.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Notification/Notification.jsx","components/App.jsx","utilities.js","index.js"],"names":["module","exports","INITIAL_STATE","name","id","number","ContactForm","state","nameInputId","uuidv4","numberInputId","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","contactForm","styles","submitButton","inputForm","onSubmit","className","htmlFor","type","onChange","disabled","isNaN","Component","Contact","onDelete","contact","onClick","deleteButton","ContactList","contacts","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","fadeTransition","unmountOnExit","Filter","onChangeFilter","filterInputId","wrapper","input","placeholder","Notification","notification","text","App","filter","notificationIsOpen","addContact","some","elem","toggleNotification","setTimeout","deleteContact","changeFilter","prevState","previousContacts","localStorage","getItem","JSON","parse","setItem","stringify","filteredContacts","toLowerCase","includes","filterContacts","in","slideTransition","appear","notificationTransition","length","ReactDOM","render","document","getElementById"],"mappings":"wIACAA,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,YAAc,0BAA0B,KAAO,mBAAmB,WAAa,2B,oBCA7HD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,UAAY,+BAA+B,aAAe,oC,iBCA3HD,EAAOC,QAAU,CAAC,aAAe,8BAA8B,QAAU,2B,gBCAzED,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,wB,gBCA5DD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,KAAO,6B,mBCA3ED,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,2BAA2B,KAAO,oBAAoB,WAAa,0BAA0B,OAAS,sBAAsB,WAAa,4B,gBCAtMD,EAAOC,QAAU,CAAC,MAAQ,uCAAuC,YAAc,6CAA6C,KAAO,sCAAsC,WAAa,8C,mOCIhLC,EAAgB,CACpBC,KAAM,GACNC,GAAI,GACJC,OAAQ,IAGWC,E,4MAKnBC,M,eACKL,G,EAGLM,YAAcC,e,EACdC,cAAgBD,e,EAEhBE,aAAe,YAAiB,IAAD,EAAbC,EAAa,EAAbA,OACRT,EAAgBS,EAAhBT,KAAMU,EAAUD,EAAVC,MACd,EAAKC,UAAL,mBACGX,EAAOU,GADV,mBAEMJ,gBAFN,K,EAMFM,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,MAAMC,aAAX,eAA6B,EAAKZ,QAClC,EAAKO,SAAL,eAAmBZ,K,uDAGX,IAAD,EACkBkB,KAAKb,MAAtBJ,EADD,EACCA,KAAME,EADP,EACOA,OACNgB,EAAyCC,IAAzCD,YAAaE,EAA4BD,IAA5BC,aAAcC,EAAcF,IAAdE,UACnC,OACE,0BACEC,SAAUL,KAAKL,aACfW,UAAWL,GAEX,2BAAOM,QAASP,KAAKZ,aAArB,QACA,2BACEkB,UAAWF,EACXI,KAAK,OACLxB,GAAIgB,KAAKZ,YACTL,KAAK,OACL0B,SAAUT,KAAKT,aACfE,MAAOV,IAET,2BAAOwB,QAASP,KAAKV,eAArB,UACA,2BACEgB,UAAWF,EACXI,KAAK,MACLxB,GAAIgB,KAAKV,cACTP,KAAK,SACL0B,SAAUT,KAAKT,aACfE,MAAOR,IAET,4BACEqB,UAAWH,EACXK,KAAK,SACLE,UAAW3B,IAASE,GAAU0B,OAAO1B,IAHvC,oB,GApDiC2B,a,gCCS1BC,EAhBC,SAAC,GAAD,IAAG9B,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQ6B,EAAjB,EAAiBA,SAAjB,OACd,wBAAIR,UAAWS,WACb,8BAAOhC,GACP,8BAAOE,GACP,4BAAQuB,KAAK,SAASQ,QAASF,EAAUR,UAAWW,gBAApD,YC8BWC,EA/BK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUL,EAAb,EAAaA,SAAb,OAClB,kBAACM,EAAA,EAAD,CAAiBC,UAAU,MACxBF,EAASG,KAAI,gBAAGvC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,OAAb,OACZ,kBAACsC,EAAA,EAAD,CACEC,IAAKxC,EACLyC,QAAS,IACTC,WAAYC,IACZC,eAAa,GAEb,kBAAC,EAAD,CACEJ,IAAKxC,EACLD,KAAMA,EACNE,OAAQA,EACR6B,SAAU,kBAAMA,EAAS9B,Y,QCMpB6C,EArBA,SAAC,GAA+B,IAA7BpC,EAA4B,EAA5BA,MAAOqC,EAAqB,EAArBA,eACjBC,EAAgB1C,eACtB,OACE,yBAAKiB,UAAW0B,WACd,2BAAOzB,QAASwB,GAAhB,yBACA,2BAAOzB,UAAW2B,QAChBzB,KAAK,OACLxB,GAAI+C,EACJG,YAAY,wBACZzC,MAAOA,EACPgB,SAAUqB,M,QCNHK,EANM,kBACnB,yBAAK7B,UAAW8B,gBACd,uBAAG9B,UAAW+B,QAAd,4B,kCCSiBC,E,4MACnBnD,MAAQ,CACNgC,SAAU,CACR,CAAEnC,GAAI,OAAQD,KAAM,gBAAiBE,OAAQ,aAC7C,CAAED,GAAI,OAAQD,KAAM,iBAAkBE,OAAQ,aAC9C,CAAED,GAAI,OAAQD,KAAM,gBAAiBE,OAAQ,aAC7C,CAAED,GAAI,OAAQD,KAAM,iBAAkBE,OAAQ,cAEhDsD,OAAQ,GACRC,oBAAoB,G,EAiBtBC,WAAa,SAAA1B,GAEX,GADqB,EAAK5B,MAAlBgC,SACKuB,MAAK,SAAAC,GAAI,OAAIA,EAAK5D,OAASgC,EAAQhC,QAG9C,OAFA,EAAK6D,0BACLC,WAAW,EAAKD,mBAAoB,MAGtC,EAAKlD,UAAS,SAAAP,GAAK,MAAK,CAAEgC,SAAS,GAAD,mBAAMhC,EAAMgC,UAAZ,CAAsBJ,S,EAG1D+B,cAAgB,SAAA9D,GACd,EAAKU,UAAS,SAAAP,GAAK,MAAK,CACtBgC,SAAUhC,EAAMgC,SAASoB,QAAO,SAAAI,GAAI,OAAIA,EAAK3D,KAAOA,U,EAIxD+D,aAAe,SAAAnD,GAAM,IACXH,EAAUG,EAAEJ,OAAZC,MACR,EAAKC,SAAS,CAAE6C,OAAQ9C,K,EAG1BmD,mBAAqB,WACnB,EAAKlD,UAAS,SAAAsD,GAAS,MAAK,CAC1BR,oBAAqBQ,EAAUR,wB,kEApCjC,IAAMS,EAAmBC,aAAaC,QAAQ,YAC1CF,GACFjD,KAAKN,SAAS,CAAEyB,SAAUiC,KAAKC,MAAMJ,O,yCAItBD,GAAY,IACrB7B,EAAanB,KAAKb,MAAlBgC,SACJ6B,EAAU7B,WAAaA,GACzB+B,aAAaI,QAAQ,WAAYF,KAAKG,UAAUpC,M,+BA+B1C,IAAD,EAC0CnB,KAAKb,MAA9CgC,EADD,EACCA,SAAUoB,EADX,EACWA,OAAQC,EADnB,EACmBA,mBACpBgB,ECrEoB,SAACrC,EAAUoB,GACrC,OAAOpB,EAASoB,QAAO,SAACxB,GAAD,OAAaA,EAAQhC,KAAK0E,cAAcC,SAASnB,EAAOkB,kBDoEtDE,CAAexC,EAAUoB,GAClD,OACE,oCACE,kBAAChB,EAAA,EAAD,CAAeqC,IAAE,EAACnC,QAAS,IAAKC,WAAYmC,IAAiBC,QAAM,GACjE,wBAAIxD,UAAU,SAAd,cAGF,kBAACiB,EAAA,EAAD,CACEqC,GAAIpB,EACJf,QAAS,IACTC,WAAYqC,IACZnC,eAAa,GAEb,kBAAC,EAAD,OAGF,kBAAC,EAAD,CAAa7B,aAAcC,KAAKyC,aAEhC,kBAAClB,EAAA,EAAD,CACEqC,GAAIzC,EAAS6C,QAAU,EACvBvC,QAAS,IACTC,WAAYC,IACZC,eAAa,GAEb,kBAAC,EAAD,CAAQnC,MAAO8C,EAAQT,eAAgB9B,KAAK+C,kBAG3C5B,EAAS6C,QACV,kBAAC,EAAD,CACE7C,SAAUqC,EACV1C,SAAUd,KAAK8C,qB,GArFMlC,aETjCqD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.55458072.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__9s3To\",\"enterActive\":\"fade_enterActive__q9D7O\",\"exit\":\"fade_exit__Lb-vJ\",\"exitActive\":\"fade_exitActive__2RpKd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__OrlO3\",\"inputForm\":\"ContactForm_inputForm__2GJhT\",\"submitButton\":\"ContactForm_submitButton__1j4U7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteButton\":\"Contact_deleteButton__1NQcw\",\"contact\":\"Contact_contact__Maimy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__IqOjQ\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1C7Ma\",\"text\":\"Notification_text__3WvWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__BLs75\",\"enterActive\":\"slide_enterActive__2XArv\",\"exit\":\"slide_exit__2XvOt\",\"exitActive\":\"slide_exitActive__3LNYO\",\"appear\":\"slide_appear__130o6\",\"appearDone\":\"slide_appearDone__2cK07\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"notification-transition_enter__13uF1\",\"enterActive\":\"notification-transition_enterActive__1Zyhl\",\"exit\":\"notification-transition_exit__H-NRp\",\"exitActive\":\"notification-transition_exitActive__1uGD_\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport styles from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  id: '',\n  number: '',\n};\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n  };\n\n  state = {\n    ...INITIAL_STATE\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n      id: uuidv4(),\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAddContact({ ...this.state });\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const { contactForm, submitButton, inputForm } = styles;\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className={contactForm}\n      >\n        <label htmlFor={this.nameInputId}>Name</label>\n        <input\n          className={inputForm}\n          type=\"text\"\n          id={this.nameInputId}\n          name=\"name\"\n          onChange={this.handleChange}\n          value={name}\n        />\n        <label htmlFor={this.numberInputId}>Number</label>\n        <input\n          className={inputForm}\n          type=\"tel\"\n          id={this.numberInputId}\n          name=\"number\"\n          onChange={this.handleChange}\n          value={number}\n        />\n        <button\n          className={submitButton}\n          type=\"submit\"\n          disabled={!name || !number || isNaN(+number)}\n        >\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteButton, contact } from './Contact.module.css';\n\nconst Contact = ({ name, number, onDelete }) => (\n  <li className={contact}>\n    <span>{name}</span>\n    <span>{number}</span>\n    <button type=\"button\" onClick={onDelete} className={deleteButton}>\n      &#10006;\n    </button>\n  </li>\n);\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport fadeTransition from '../../transitions/fade.module.css';\n// Components\nimport Contact from './Contact/Contact';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <TransitionGroup component=\"ul\">\n    {contacts.map(({ name, id, number }) => (\n      <CSSTransition\n        key={id}\n        timeout={250}\n        classNames={fadeTransition}\n        unmountOnExit\n      >\n        <Contact\n          key={id}\n          name={name}\n          number={number}\n          onDelete={() => onDelete(id)}\n        />\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { wrapper, input } from './Filter.module.css';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  const filterInputId = uuidv4();\n  return (\n    <div className={wrapper}>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input className={input}\n        type=\"text\"\n        id={filterInputId}\n        placeholder=\"Enter contact name...\"\n        value={value}\n        onChange={onChangeFilter}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n\n","import React from 'react';\nimport { notification, text } from './Notification.module.css';\n\nconst Notification = () => (\n  <div className={notification}>\n    <p className={text}>Contact already exist!</p>\n  </div>\n);\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n// Components\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport Notification from './Notification/Notification';\n// Utilities\nimport { filterContacts } from '../utilities';\n// Styles\nimport slideTransition from '../transitions/slide.module.css';\nimport fadeTransition from '../transitions/fade.module.css';\nimport notificationTransition from '../transitions/notification-transition.module.css';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    notificationIsOpen: false,\n  };\n\n  componentDidMount() {\n    const previousContacts = localStorage.getItem('contacts');\n    if (previousContacts) {\n      this.setState({ contacts: JSON.parse(previousContacts) });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  addContact = contact => {\n    const { contacts } = this.state;\n    if (contacts.some(elem => elem.name === contact.name)) {\n      this.toggleNotification();\n      setTimeout(this.toggleNotification, 2500);\n      return;\n    }\n    this.setState(state => ({ contacts: [...state.contacts, contact] }));\n  };\n\n  deleteContact = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(elem => elem.id !== id),\n    }));\n  };\n\n  changeFilter = e => {\n    const { value } = e.target;\n    this.setState({ filter: value });\n  };\n\n  toggleNotification = () => {\n    this.setState(prevState => ({\n      notificationIsOpen: !prevState.notificationIsOpen,\n    }));\n  };\n\n  render() {\n    const { contacts, filter, notificationIsOpen } = this.state;\n    const filteredContacts = filterContacts(contacts, filter);\n    return (\n      <>\n        <CSSTransition in timeout={500} classNames={slideTransition} appear>\n          <h1 className=\"title\">Phonebook</h1>\n        </CSSTransition>\n\n        <CSSTransition\n          in={notificationIsOpen}\n          timeout={250}\n          classNames={notificationTransition}\n          unmountOnExit\n        >\n          <Notification />\n        </CSSTransition>\n\n        <ContactForm onAddContact={this.addContact} />\n\n        <CSSTransition\n          in={contacts.length >= 2}\n          timeout={250}\n          classNames={fadeTransition}\n          unmountOnExit\n        >\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        </CSSTransition>\n\n        {!!contacts.length && (\n          <ContactList\n            contacts={filteredContacts}\n            onDelete={this.deleteContact}\n          />\n        )}\n      </>\n    );\n  }\n}","export const filterContacts = (contacts, filter) => {\n    return contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  };\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}